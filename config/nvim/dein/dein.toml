# colorscheme
[[plugins]]
repo = 'otyn0308/otynium'
hook_add = '''
	colorscheme otynium
'''

#[[plugins]]
#repo = 'cocopon/iceberg.vim'
#hook_add = '''
#	colorscheme iceberg
#'''

# Required
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['lsp-status.nvim']
hook_add = '''
	let g:airline#extensions#tabline#enabled = 1
	let g:airline#extensions#tabline#buffer_idx_mode = 1
	nmap <C-o> <Plug>AirlineSelectPrevTab
	nmap <C-p> <Plug>AirlineSelectNextTab

	function LspStatus() abort
		if luaeval('#vim.lsp.buf_get_clients() > 0')
			let status = luaeval('require("lsp-status").status()')
			return trim(status)
		endif
		return ''
	endfunction
	call airline#parts#define_function('lsp_status', 'LspStatus')
	call airline#parts#define_condition('lsp_status', 'luaeval("#vim.lsp.buf_get_clients() > 0")')
	let g:airline#extensions#nvimlsp#enabled = 0
	let g:airline_section_warning = airline#section#create_right(['lsp_status'])
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'prabirshrestha/async.vim'

#[[plugins]]
#repo = 'simeji/winresizer'
#hook_add = '''
#	let g:winresizer_start_key = '<C-S-R>'
#'''

# dark powered

## deoplete
[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_add = '''
	source ~/.config/nvim/plugins/deoplete.rc.vim
'''

## denite
[[plugins]]
repo = 'Shougo/denite.nvim'

## deoppet
[[plugins]]
repo = 'Shougo/deoppet.nvim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

## deol
[[plugins]]
repo = 'Shougo/deol.nvim'

## defx
[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
	source ~/.config/nvim/plugins/defx.rc.vim
'''

[[plugins]]
repo = 'kristijanhusak/defx-git'
depends = ['defx.nvim']

[[plugins]]
repo = 'kristijanhusak/defx-icons'
depends = ['defx.nvim', 'vim-devicons']

[[plugins]]
repo = 'ryanoasis/vim-devicons'

# util

[[plugins]]
repo = 'leico/autodate.vim'

[[plugins]]
repo = 'markonm/traces.vim'

# LSP
[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = ['lsp-status']
hook_add = '''
	lua require('nvim-lsp')
'''

[[plugins]]
repo = 'nvim-lua/lsp-status.nvim'

[[plugins]]
repo = 'nvim-lua/completion-nvim'
depends = ['nvim-lspconfig']
hook_add = '''
	autocmd BufEnter * lua require'completion'.on_attach()

	" Use <Tab> and <S-Tab> to navigate through popup menu
	inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
	inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

	" Set completeopt to have a better completion experience
	set completeopt=menuone,noinsert,noselect

	" Avoid showing message extra message when using completion
	set shortmess+=c
	imap <tab> <Plug>(completion_smart_tab)
'''

[[plugins]]
repo = 'nvim-lua/lsp_extensions.nvim'
depends = ['nvim-lspconfig']
hook_add = '''
	autocmd BufEnter,BufWinEnter,TabEnter *.rs :lua require'lsp_extensions'.inlay_hints{}
	nnoremap <Leader>h :lua require'lsp_extensions'.inlay_hints()<CR>
'''

[[plugins]]
repo = 'glepnir/lspsaga.nvim'
depends = ['nvim-lspconfig']

[[plugins]]
repo = 'dag/vim-fish'

[[plugins]]
repo = 'elmcast/elm-vim'

[[plugins]]
repo = 'rhysd/vim-llvm'
